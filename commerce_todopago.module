<?php

/**
 * @file
 * Implements Todo Pago payment services for use with Drupal Commerce.
 */

/**
 * Loads a stored query by ID.
 *
 * @param $id
 *   The ID of the query to load.
 *
 * @return
 *   The original query with some meta data related to local processing.
 */
function commerce_todopago_query_load($id) {
  return db_select('commerce_todopago_queries', 'ctq')
    ->fields('ctq')
    ->condition('ctq.query_id', $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves a query with some meta data related to local processing.
 *
 * @param $query
 *   A query array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the query.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the query is
 *     received by reference, it will also contain the serial numeric query_id
 *     used locally.
 */
function commerce_todopago_query_save(&$query) {
  if (!empty($query['query_id']) && commerce_todopago_query_load($query['query_id'])) {
    $query['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_todopago_queries', $query, 'query_id');
  }
  else {
    $query['created'] = REQUEST_TIME;
    $query['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_todopago_queries', $query);
  }
}

/**
 * Deletes a stored query by ID.
 *
 * @param $id
 *   The ID of the query to delete.
 */
function commerce_todopago_query_delete($id) {
  db_delete('commerce_todopago_queries')
    ->condition('query_id', $id)
    ->execute();
}

/**
 * Returns the URL to the specified Todo Pago's API server.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the Todo Pago's API server.
 */
function commerce_todopago_api_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://50.19.97.101:8243/services';
    case 'live':
      return 'https://50.19.97.101:8243/services';
  }
}

/**
 * Returns the Todo Pago's WSDLs.
 *
 * @return
 *   An array with the Todo Pago's WSDLs.
 */
function commerce_todopago_wsdl() {
  return array(
    'Authorize' => 'Authorize.wsdl',
    'Operations' => 'Operations.wsdl',
  );
}

/**
 * Loads the payment transaction matching the Todo Pago's transaction ID.
 *
 * @param $answer_key
 *   The Todo Pago's transaction ID to search for in the remote_id field.
 *
 * @return
 *   The loaded payment transaction.
 */
function commerce_todopago_payment_transaction_load($answer_key) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $answer_key));
  return $transactions ? reset($transactions) : FALSE;
}

/**
 * Returns an array of all possible currency codes for the different Todo Pago's
 * payment methods.
 *
 * @param $method_id
 *   The ID of the Todo Pago's payment method whose currencies should be returned.
 *
 * @return
 *   An associative array of currency codes with keys and values being the
 *   currency codes accepted by the specified Todo Pago's payment method.
 */
function commerce_todopago_currencies($method_id = '') {
  switch ($method_id) {
    default:
      return drupal_map_assoc(array('ARS'));
  }
}


/**
 * Formats a price amount into a decimal value as expected by Todo Pago.
 *
 * @param $amount
 *   An integer price amount.
 * @param $currency_code
 *   The currency code of the price.
 *
 * @return
 *   The decimal price amount as expected by Todo Pago's API servers.
 */
function commerce_todopago_price_amount($amount, $currency_code) {
  $rounded_amount = commerce_currency_round($amount, commerce_currency_load($currency_code));
  return number_format(commerce_currency_amount_to_decimal($rounded_amount, $currency_code), 2, '.', '');
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_todopago_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['todopago'] = array(
    'base' => 'commerce_todopago',
    'title' => t('Todo Pago'),
    'short_title' => t('Todo Pago'),
    'description' => t('Payment through Todo Pago\'s gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Todo Pago's payment method.
 */
function commerce_todopago_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'merchant' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_todopago_currencies())) ? $default_currency : 'ARS',
    'allow_supported_currencies' => FALSE,
    'authorization' => '',
    'security' => '',
    'server' => 'sandbox',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_todopago_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_todopago_default_settings();

  $form['merchant'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant code'),
    '#description' => t('The code of the company in Todo Pago\'s system.'),
    '#default_value' => $settings['merchant'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_todopago_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );
  $form['authorization'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization code'),
    '#description' => t('The authorizarion code for the company in Todo Pago\'s system.'),
    '#default_value' => $settings['authorization'],
    '#required' => TRUE,
  );
  $form['security'] = array(
    '#type' => 'textfield',
    '#title' => t('Security code'),
    '#description' => t('The security code for the company in Todo Pago\'s system.'),
    '#default_value' => $settings['security'],
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Todo Pago\'s server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form if enabled in
 * the payment method settings.
 */
function commerce_todopago_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['todopago_information'] = array(
    '#markup' => '<span class="commerce-todopago-info">' . t('(Continue with checkout to complete payment via Todo Pago.)') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a Todo Pago's form.
 */
function commerce_todopagos_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (
    (empty($payment_method['settings']['merchant'])) ||
    (empty($payment_method['settings']['authorization'])) ||
    (empty($payment_method['settings']['security']))
  ) {
    drupal_set_message(t('Todo Pago is not configured for use.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'url_error' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'url_ok' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );

  return commerce_todopago_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_todopago_redirect_form_validate($order, $payment_method) {
  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
    // TODO: Implementar verificaci√≥n del resultado
//  if (!empty($_POST['payment_status']) && $_POST['payment_status'] == 'Failed') {
//    return FALSE;
//  }
}

/**
 * Builds a Todo Pago's form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - merchant: the merchant code of the company the payment submits to
 *   - url_error: the URL Todo Pago should send the user to on cancellation
 *   - url_ok: the URL Todo Pago should send the user to on successful payment
 *   - currency_code: the currency code to use for this payment if the
 *     total for the order is in a non supported currency
 *   - authorization: the authorization code for the company
 *   - security: the security code for the company
 *
 * @return
 *   A renderable form array.
 */
function commerce_todopago_order_form($form, &$form_state, $order, $settings) {
//  $wrapper = entity_metadata_wrapper('commerce_order', $order);
//
//  // Determine the currency code to use to actually process the transaction,
//  // which will either be the default currency code or the currency code of the
//  // order if it's supported by PayPal if that option is enabled.
//  $currency_code = $settings['currency_code'];
//  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();
//
//  if (!empty($settings['allow_supported_currencies']) && in_array($order_currency_code, array_keys(commerce_paypal_currencies('paypal_wps')))) {
//    $currency_code = $order_currency_code;
//  }
//
//  $amount = $wrapper->commerce_order_total->amount->value();
//
//  // Ensure a default value for the payment_method setting.
//  $settings += array('payment_method' => '');
//
//  // Build the data array that will be translated into hidden form values.
//  $data = array(
//    // Specify the checkout experience to present to the user.
//    'cmd' => '_cart',
//
//    // Signify we're passing in a shopping cart from our system.
//    'upload' => 1,
//
//    // The store's PayPal e-mail address
//    'business' => $settings['business'],
//
//    // The path PayPal should send the IPN to
//    'notify_url' => commerce_paypal_ipn_url($settings['payment_method']),
//
//    // The application generating the API request
//    'bn' => 'CommerceGuys_Cart_PPS',
//
//    // Set the correct character set
//    'charset' => 'utf-8',
//
//    // Do not display a comments prompt at PayPal
//    'no_note' => 1,
//
//    // Do not display a shipping address prompt at PayPal
//    'no_shipping' => 1,
//
//    // Return to the review page when payment is canceled
//    'cancel_return' => $settings['cancel_return'],
//
//    // Return to the payment redirect page for processing successful payments
//    'return' => $settings['return'],
//
//    // Return to this site with payment data in the POST
//    'rm' => 2,
//
//    // The type of payment action PayPal should take with this order
//    'paymentaction' => $settings['payment_action'],
//
//    // Set the currency and language codes
//    'currency_code' => $currency_code,
//    'lc' => $settings['language'],
//
//    // Use the timestamp to generate a unique invoice number
//    'invoice' => commerce_paypal_ipn_invoice($order),
//
//    // Define a single item in the cart representing the whole order
//    'amount_1' => commerce_paypal_price_amount(commerce_currency_convert($amount, $order_currency_code, $currency_code), $currency_code),
//    'item_name_1' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
//    'on0_1' => t('Product count'),
//    'os0_1' => commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()),
//  );
//
//  // Allow modules to alter parameters of the API request.
//  drupal_alter('commerce_paypal_wps_order_form_data', $data, $order);
//
//  $form['#action'] = commerce_paypal_wps_server_url($settings['server']);
//
//  foreach ($data as $name => $value) {
//    if (!empty($value)) {
//      $form[$name] = array('#type' => 'hidden', '#value' => $value);
//    }
//  }
//
//  $form['submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Proceed to PayPal'),
//  );
//
  return $form;
}

