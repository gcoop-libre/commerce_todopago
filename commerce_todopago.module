<?php

/**
 * @file
 * Implements Todo Pago payment services for use with Drupal Commerce.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_todopago_libraries_info() {
  $libraries = array();

  $libraries['todopago'] = array(
    'name' => 'Todo Pago PHP SDK',
    'vendor url' => 'http://www.todopago.com.ar',
    'download url' => 'https://github.com/TodoPago/sdk-php',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'lib/TodoPago.php',
      'pattern' => '/^define\(\'VERSION_TODOPAGO\', \'([0-9\.]+)\'\);$/',
      'lines' => 10,
    ),
    'files' => array(
      'php' => array(
        'TodoPago.php',
      ),
    ),
    'integration files' => array(
      'commerce_todopago' => array(
        'php' => array(
          'includes/commerce_todopago.service.inc',
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Loads a stored query by ID.
 *
 * @param $id
 *   The ID of the query to load.
 *
 * @return
 *   The original query with some meta data related to local processing.
 */
function commerce_todopago_query_load($id) {
  return db_select('commerce_todopago_queries', 'ctq')
    ->fields('ctq')
    ->condition('ctq.query_id', $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves a query with some meta data related to local processing.
 *
 * @param $query
 *   A query array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the query.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the query is
 *     received by reference, it will also contain the serial numeric query_id
 *     used locally.
 */
function commerce_todopago_query_save(&$query) {
  if (!empty($query['query_id']) && commerce_todopago_query_load($query['query_id'])) {
    $query['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_todopago_queries', $query, 'query_id');
  }
  else {
    $query['created'] = REQUEST_TIME;
    $query['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_todopago_queries', $query);
  }
}

/**
 * Deletes a stored query by ID.
 *
 * @param $id
 *   The ID of the query to delete.
 */
function commerce_todopago_query_delete($id) {
  db_delete('commerce_todopago_queries')
    ->condition('query_id', $id)
    ->execute();
}

/**
 * Loads the payment transaction matching the Todo Pago's transaction ID.
 *
 * @param $remote_id
 *   The Todo Pago's transaction ID to search for in the remote_id field.
 *
 * @return
 *   The loaded payment transaction.
 */
function commerce_todopago_payment_transaction_load($remote_id) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $remote_id));
  return $transactions ? reset($transactions) : FALSE;
}

/**
 * Returns an array of all possible currency codes for the different Todo Pago's
 * payment methods.
 *
 * @param $method_id
 *   The ID of the Todo Pago's payment method whose currencies should be returned.
 *
 * @return
 *   An associative array of currency codes with keys and values being the
 *   currency codes accepted by the specified Todo Pago's payment method.
 */
function commerce_todopago_currencies($method_id = '') {
  $currencies = array();

  if (($library = libraries_load('todopago')) && !empty($library['loaded'])) {
    $currencies = TodoPagoConnector::get_currencies();

    switch ($method_id) {
      default:
        $currencies = drupal_map_assoc($currencies);
    }
  }

  return $currencies;
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_todopago_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_todopago'] = array(
    'base' => 'commerce_todopago',
    'title' => t('Todo Pago'),
    'short_title' => t('Todo Pago'),
    'description' => t('Payment through Todo Pago\'s gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'file' => 'includes/commerce_todopago.payment_method.inc',
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Todo Pago's payment method.
 */
function commerce_todopago_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'merchant' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_todopago_currencies())) ? $default_currency : 'ARS',
    'allow_supported_currencies' => FALSE,
    'authorization' => '',
    'security' => '',
    'server' => 'sandbox',
  );
}

