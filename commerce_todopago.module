<?php

/**
 * @file
 * Implements Todo Pago payment services for use with Drupal Commerce.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_todopago_libraries_info() {
  $libraries = array();

  $libraries['todopago'] = array(
    'name' => 'Todo Pago PHP SDK',
    'vendor url' => 'http://www.todopago.com.ar',
    'download url' => 'https://github.com/TodoPago/sdk-php',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'lib/TodoPago.php',
      'pattern' => '/^define\(\'VERSION_TODOPAGO\', \'([0-9\.]+)\'\);$/',
      'lines' => 10,
    ),
    'files' => array(
      'php' => array(
        'TodoPago.php',
      ),
    ),
    'integration files' => array(
      'commerce_todopago' => array(
        'php' => array(
          'includes/commerce_todopago.service.inc',
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Loads a stored query by ID.
 *
 * @param $id
 *   The ID of the query to load.
 *
 * @return
 *   The original query with some meta data related to local processing.
 */
function commerce_todopago_query_load($id) {
  return db_select('commerce_todopago_queries', 'ctq')
    ->fields('ctq')
    ->condition('ctq.query_id', $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves a query with some meta data related to local processing.
 *
 * @param $query
 *   A query array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the query.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the query is
 *     received by reference, it will also contain the serial numeric query_id
 *     used locally.
 */
function commerce_todopago_query_save(&$query) {
  if (!empty($query['query_id']) && commerce_todopago_query_load($query['query_id'])) {
    $query['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_todopago_queries', $query, 'query_id');
  }
  else {
    $query['created'] = REQUEST_TIME;
    $query['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_todopago_queries', $query);
  }
}

/**
 * Deletes a stored query by ID.
 *
 * @param $id
 *   The ID of the query to delete.
 */
function commerce_todopago_query_delete($id) {
  db_delete('commerce_todopago_queries')
    ->condition('query_id', $id)
    ->execute();
}

/**
 * Loads the payment transaction matching the Todo Pago's transaction ID.
 *
 * @param $answer_key
 *   The Todo Pago's transaction ID to search for in the remote_id field.
 *
 * @return
 *   The loaded payment transaction.
 */
function commerce_todopago_payment_transaction_load($answer_key) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $answer_key));
  return $transactions ? reset($transactions) : FALSE;
}

/**
 * Returns an array of all possible currency codes for the different Todo Pago's
 * payment methods.
 *
 * @param $method_id
 *   The ID of the Todo Pago's payment method whose currencies should be returned.
 *
 * @return
 *   An associative array of currency codes with keys and values being the
 *   currency codes accepted by the specified Todo Pago's payment method.
 */
function commerce_todopago_currencies($method_id = '') {
  $currencies = array();

  if (($library = libraries_load('todopago')) && !empty($library['loaded'])) {
    $currencies = TodoPagoConnector::get_currencies();

    switch ($method_id) {
      default:
        return drupal_map_assoc($currencies);
    }
  }
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_todopago_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_todopago'] = array(
    'base' => 'commerce_todopago',
    'title' => t('Todo Pago'),
    'short_title' => t('Todo Pago'),
    'description' => t('Payment through Todo Pago\'s gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Todo Pago's payment method.
 */
function commerce_todopago_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'merchant' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_todopago_currencies())) ? $default_currency : 'ARS',
    'allow_supported_currencies' => FALSE,
    'authorization' => '',
    'security' => '',
    'server' => 'sandbox',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_todopago_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_todopago_default_settings();

  $form['merchant'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant code'),
    '#description' => t('The code of the company in Todo Pago\'s system.'),
    '#default_value' => $settings['merchant'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_todopago_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );
  $form['authorization'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization code'),
    '#description' => t('The authorizarion code for the company in Todo Pago\'s system.'),
    '#default_value' => $settings['authorization'],
    '#required' => TRUE,
  );
  $form['security'] = array(
    '#type' => 'textfield',
    '#title' => t('Security code'),
    '#description' => t('The security code for the company in Todo Pago\'s system.'),
    '#default_value' => $settings['security'],
    '#required' => TRUE,
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Todo Pago\'s server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form if enabled in
 * the payment method settings.
 */
function commerce_todopago_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['todopago_information'] = array(
    '#markup' => '<span class="commerce-todopago-info">' . t('(Continue with checkout to complete payment via Todo Pago.)') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a Todo Pago's form.
 */
function commerce_todopago_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (
    (empty($payment_method['settings']['merchant'])) ||
    (empty($payment_method['settings']['authorization'])) ||
    (empty($payment_method['settings']['security']))
  ) {
    drupal_set_message(t('Todo Pago is not configured for use.'), 'error');
    return array();
  }

  $payment_method['settings']['instance_id'] = $payment_method['instance_id'];

  return commerce_todopago_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_todopago_redirect_form_validate($order, $payment_method) {
  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
    // TODO: Implementar verificaciÃ³n del resultado
//  if (!empty($_POST['payment_status']) && $_POST['payment_status'] == 'Failed') {
//    return FALSE;
//  }
}

/**
 * Builds a Todo Pago's form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - merchant: the merchant code of the company the payment submits to
 *   - currency_code: the currency code to use for this payment if the
 *     total for the order is in a non supported currency
 *   - authorization: the authorization code for the company
 *   - security: the security code for the company
 *   - instance_id: the instance_id of the payment method
 *
 * @return
 *   A renderable form array.
 */
function commerce_todopago_order_form($form, &$form_state, $order, $settings) {
  $form = array();

  if (($library = libraries_load('todopago')) && !empty($library['loaded'])) {
    try {
      $todopago = new TodoPagoConnector($settings);

      $form = $todopago->create_order_form($order);
    }
    catch (Exception $e) {
      commerce_payment_redirect_pane_previous_page($order);

      watchdog('commerce_todopago', 'There was an error with the payment for Order Nr. @order_number: %error', array('@order_number' => $order->order_number, '%error' => $e->getMessage()), WATCHDOG_NOTICE);

      drupal_set_message($e->getMessage(), 'error');

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Try again'),
      );
    }
  }

  return $form;
}

